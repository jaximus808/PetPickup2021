"use strict";

var c = require('ansi-colors');

var clfDate = require('clf-date');

var ms = require('ms'); // https://github.com/cabinjs/request-received


var requestReceivedStartTime = Symbol.for('request-received.startTime');
var pinoHttpStartTime = Symbol.for('pino-http.startTime');

function getStartTime(request) {
  var startTime = new Date();
  if (request[requestReceivedStartTime] instanceof Date) startTime = request[requestReceivedStartTime];else if (typeof request[requestReceivedStartTime] === 'number') startTime = new Date(request[requestReceivedStartTime]);else if (request[pinoHttpStartTime]) startTime = new Date(request[pinoHttpStartTime]);else if (request._startTime instanceof Date) startTime = request._startTime;else if (typeof request._startTime === 'number') startTime = new Date(request._startTime);
  return startTime;
}

function apacheCommonLogFormat(options) {
  var req = options.req,
      res = options.res,
      ctx = options.ctx;
  var startTime = getStartTime(req);
  return "".concat(ctx ? ctx.ip : req.ip, " - ").concat(clfDate(startTime), " \"").concat(req.method, " ").concat(req.url, " HTTP/").concat(req.httpVersionMajor, ".").concat(req.httpVersionMinor, "\" ").concat(res.statusCode, " ").concat(res.getHeader('content-length') || '-');
}

function devFriendlyLogFormat(options) {
  var req = options.req,
      res = options.res,
      ctx = options.ctx;
  var statusColor = res.statusCode >= 500 ? 'red' : res.statusCode >= 400 ? 'yellow' : res.statusCode >= 300 ? 'cyan' : res.statusCode >= 200 ? 'green' : 'white';
  var responseTime = '-';
  var responseTimeHeader = res.getHeader('x-response-time');

  if (responseTimeHeader) {
    var milliseconds = ms(responseTimeHeader);
    var responseColor = milliseconds >= 1000 ? 'red' : milliseconds >= 500 ? 'magenta' : milliseconds >= 250 ? 'yellow' : milliseconds >= 100 ? 'cyan' : 'green';
    responseTime = c[responseColor]("".concat(milliseconds, " ms"));
  }

  return [ctx ? ctx.ip : req.ip, req.method, req.url, "HTTP/".concat(req.httpVersionMajor, ".").concat(req.httpVersionMinor), c[statusColor](res.statusCode), res.getHeader('content-length') || '-', '-', responseTime].join(' ');
} // https://stackoverflow.com/questions/9234699/understanding-apaches-access-log


module.exports = function (options) {
  // Apache Common Log Format
  // <https://httpd.apache.org/docs/current/logs.html#common>
  // :remote-addr - :remote-user [:date[clf]] ":method :url HTTP/:http-version" :status :res[content-length]
  if (process.env.NODE_ENV === 'production') return apacheCommonLogFormat(options); // Dev-Friendly Log Format
  // :remote-addr :remote-user :method :url HTTP/:http-version :status :res[content-length] - :response-time ms

  return devFriendlyLogFormat(options);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,